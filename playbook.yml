---
- hosts: all
  any_errors_fatal: true
  become: yes
  tasks:
  - name: install dependencies
    apt:
      name: apt-transport-https
      state: present

  - name: install docker and kubernetes repo keys
    apt_key:
      url: "{{ item }}"
      state: present
    with_items:
    - https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - https://download.docker.com/linux/debian/gpg

  - name: setup docker and kubernetes repos
    apt_repository:
      repo: "{{ item }}"
      state: present
    with_items:
    - deb https://apt.kubernetes.io/ kubernetes-xenial main
    - deb https://download.docker.com/linux/debian stretch stable

  - name: create /etc/docker
    file:
      path: /etc/docker
      state: directory

  - name: create docker configuration
    copy:
      dest: /etc/docker/daemon.json
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }

  - name: install docker and kube packages
    apt:
      name:
      - docker-ce=18.06.1~*
      - kubelet
      - kubeadm
      - kubectl
      install_recommends: no

  - name: check if we've been deployed already
    stat:
      path: /etc/kubernetes/kubelet.conf
    register: kubelet_conf

- hosts: primary
  any_errors_fatal: true
  become: yes
  tasks:
  - name: prefetch kubernetes images
    command: kubeadm config images pull

  - name: generate a kubeadm token if needed
    shell: >
      cat /root/kubeadm-token
      || (umask 0077 && kubeadm token generate | tee /root/kubeadm-token)
    register: kubeadm_token

  - name: run kubeadm init on master
    command: >
      kubeadm init
      --token {{ kubeadm_token.stdout }}
      --apiserver-advertise-address {{ ansible_default_ipv4.address }}
      --pod-network-cidr 10.244.0.0/16
    when: not kubelet_conf.stat.exists

  - name: fetch discovery token ca cert hash
    shell: >
      openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt
      | openssl rsa -pubin -outform der 2>/dev/nullr
      | openssl dgst -sha256 -hex | sed 's/^.* //'
    register: discovery_token_hash

  - name: set net.bridge.bridge-nf-call-iptables=1
    sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1

  - name: install flannel networking
    command: >
      kubectl apply -f
      https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: create web-hostname deployment
    shell: >
      kubectl get deploy web-hostname
      || kubectl run --generator=run-pod/v1 web-hostname --image=quay.io/treytabner/web-hostname --replicas=2 --port=80
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: create web-hostname service
    shell: >
      kubectl get service web-hostname
      || kubectl expose deployment web-hostname --port=80 --type=NodePort
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- hosts: workers
  any_errors_fatal: true
  become: yes
  tasks:
  - name: set primary name
    set_fact:
      primary: "{{ groups['primary'][0] }}"
    run_once: true

  - name: run kubeadm join on the rest
    command: >
      kubeadm join
      --token {{ hostvars[primary].kubeadm_token.stdout }}
      {{ hostvars[primary].ansible_default_ipv4.address }}:6443
      --discovery-token-ca-cert-hash sha256:{{ hostvars[primary].discovery_token_hash.stdout }}
    when: not kubelet_conf.stat.exists

- hosts: primary
  any_errors_fatal: true
  become: yes
  tasks:
  - name: fetch admin kubeconfig
    fetch:
      src: /etc/kubernetes/admin.conf
      dest: admin.conf
      flat: yes
